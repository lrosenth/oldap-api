
---
openapi: 3.1.0
jsonSchemaDialect: "https://spec.openapis.org/oas/3.1/dialect/base"

info:
  title: OLDAP-API
  description: RESTful API for oldap
  version: 0.1.0
servers:
- url: http://127.0.0.1:5000
  description: local server

paths:
  /admin/auth/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Authentication/login
      description: Perform login/logout with userid/password. Returns a JWT token.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
              examples:
                success:
                  summary: Successful login
                  value:
                    message: "Login succeeded"
                    token: "exampletoken"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

    delete:
      summary: "Logout"
      description: "Logout from system"
      security:
        - AccessToken: []
      responses:
        "200":
          description: "OK"
        "400":
          description: "Several Errors that involve bad requests"
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/user/{userId}:
    put:
      summary: "Create a new user"
      description: "Create a new user with the given data"
      security:
        - AccessToken: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            maxLength: 32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                givenName:
                  type: string
                familyName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  minLength: 8
                isActive:
                  type: boolean
                userIri:
                  type: string
                inProjects:
                  description: "The project field is the QName of the project, the permissions is a sets of admin permissions."
                  type: array
                  items:
                    type: object
                    properties:
                      project:
                        type: string
                      permissions:
                        type: array
                        items:
                          type: string
                          enum:
                            - ADMIN_OLDAP
                            - ADMIN_USERS
                            - ADMIN_PERMISSION_SETS
                            - ADMIN_RESOURCES
                            - ADMIN_MODEL
                            - ADMIN_CREATE
                hasPermissions:
                  description: "Must be a list of QNames of the permission sets."
                  type: array
                  items:
                    type: string
              required:
                - givenName
                - familyName
                - password

      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User {userid} created"
                  userIri:
                    type: string
                    example: "{userIri}"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: "Delete a user"
      description: "The user that has the rights (given by his token) deletes another user"
      security:
        - AccessToken: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User {userid} deleted"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

    get:
      summary: "Get user info"
      description: "Get all information about a user"
      security:
        - AccessToken: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                required:
                  - creator
                  - created
                  - contributor
                  - modified
                  - userId
                  - userIri
                  - familyName
                  - givenName
                  - email
                properties:
                  creator:
                    type: string
                  created:
                    type: string
                    format: date-time
                  contributor:
                    type: string
                  modified:
                    type: string
                    format: date-time
                  userIri:
                    type: string
                  userId:
                    type: string
                  familyName:
                    type: string
                  givenName:
                    type: string
                  email:
                    type: string
                  isActive:
                    type: boolean
                  inProjects:
                    type: array
                    items:
                      type: object
                      properties:
                        project:
                          type: string
                        permissions:
                          type: array
                          items:
                            type: string
                  hasPermissions:
                    type: array
                    items:
                      type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

    post:
      summary: "Modify a user"
      description: "Modify value(s) of a user definition."
      security:
        - AccessToken: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                givenName:
                  type: string
                familyName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                isActive:
                  type: boolean
                inProjects:
                  oneOf:
                    - type: object
                      properties:
                        add:
                          type: object
                          properties:
                            project:
                              type: string
                            permissions:
                              oneOf:
                                - type: array
                                  items:
                                    type: string
                                - type: "null"
                        del:
                          type: array
                          items:
                            type: string
                    - type: array
                      items:
                        type: object
                        properties:
                          project:
                            type: string
                          permissions:
                            oneOf:
                              - type: array
                                items:
                                  type: string
                              - type: object
                                properties:
                                  add:
                                    type: array
                                    items:
                                      type: string
                                  del:
                                    type: array
                                    items:
                                      type: string
                              - type: "null"
                hasPermissions:
                  oneOf:
                    - type: array
                      items:
                        type: string
                    - type: object
                      properties:
                        add:
                          type: array
                          items:
                            type: string
                        del:
                          type: array
                          items:
                            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User {userid} modified"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/user/search:
    get:
      summary: "Searches for given user"
      description: "Search for a given user"
      security:
        - AccessToken: []
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          description: "userId of user"
          required: false
        - in: query
          name: familyName
          schema:
            type: string
          description: "Family name of user"
          required: false
        - in: query
          name: givenName
          schema:
            type: string
          description: "Given name of user"
          required: false
        - in: query
          name: inProject
          schema:
            type: string
          description: "Users belonging to given project"
          required: false
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - 'https://orcid.org/0000-0003-1681-4036'
                - 'https://orcid.org/0000-0003-1485-4923'
                - 'https://orcid.org/0000-0001-9277-3921'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'

  /admin/user/get:
    get:
      summary: "Get user by iri"
      description: "Get all user data from the user Iri"
      security:
        - AccessToken: []
      parameters:
        - in: query
          name: iri
          schema:
            type: string
          description: Iri of user
          required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                required:
                  - creator
                  - created
                  - contributor
                  - modified
                  - userId
                  - userIri
                  - familyName
                  - givenName
                  - email
                properties:
                  creator:
                    type: string
                  created:
                    type: string
                    format: date-time
                  contributor:
                    type: string
                  modified:
                    type: string
                    format: date-time
                  userIri:
                    type: string
                  userId:
                    type: string
                  familyName:
                    type: string
                  givenName:
                    type: string
                  email:
                    type: string
                  isActive:
                    type: boolean
                  inProjects:
                    type: array
                    items:
                      type: object
                      properties:
                        project:
                          type: string
                        permissions:
                          type: array
                          items:
                            type: string
                  hasPermissions:
                    type: array
                    items:
                      type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

  /admin/project/{projectId}:
    put:
      summary: Project creation
      description: Creates a new project in the database
      security:
        - AccessToken: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectIri:
                  type: string
                label:
                  $ref: '#/components/schemas/LangString'
                comment:
                  $ref: '#/components/schemas/LangString'
                namespaceIri:
                  type: string
                projectStart:
                  type: string
                  format: date
                projectEnd:
                  type: string
                  format: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Project successfully created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: "Delete a project"
      description: "The user that has the rights (given by his token) deletes a project"
      security:
        - AccessToken: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Project successfully deleted"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: "Gets/reads Information about a project"
      description: "The user that has the rights (given by his token) gets Information about a project"
      security:
        - AccessToken: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectIri:
                    type: string
                    description: An Iri or a QName identifying the project
                  creator:
                    type: string
                    description: An Iri or QName describing the user
                  created:
                    type: string
                    format: date-time
                    description: Creation date of this project
                  contributor:
                    type: string
                    description: An Iri or QName describing the user
                  modified:
                    type: string
                    format: date-time
                    description: Last modification date of project
                  label:
                    $ref: '#/components/schemas/LangString'
                  comment:
                    $ref: '#/components/schemas/LangString'
                  message:
                    type: string
                  shortName:
                    type: string
                    pattern: ^[a-zA-Z_][a-zA-Z0-9._-]*$
                  namespaceIri:
                    type: string
                  projectStart:
                    type: string
                    format: date
                  projectEnd:
                    type: string
                    format: date
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

    post:
      summary: "Modify/updates a project"
      description: "The user that has the rights (given by his token) modifies a project"
      security:
        - AccessToken: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
                comment:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
                projectStart:
                  type:
                    - string
                    - "null"
                  format: date
                projectEnd:
                  type:
                    - string
                    - "null"
                  format: date
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Project updated successfully'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/project/search:
    get:
      summary: "Searches for given parameters"
      description: "The user that has the rights (given by his token) searches for given parameters in projects"
      security:
        - AccessToken: []
      parameters:
        - in: query
          name: label
          schema:
            type: string
          description: Label or part of label of project
        - in: query
          name: comment
          schema:
            type: string
          description: Comment or part of comment of project
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    projectIri:
                      type: string
                    projectShortName:
                      type: string
              examples:
                example1:
                  summary: Example response
                  value:
                    - projectIri: "http://www.gaga/hallo"
                      projectShortName: "hallo"
                    - projectIri: "mypr:project"
                      projectShortName: "project"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'

  /admin/project/get:
    get:
      summary: "Get project by iri"
      description: "Get all project data from the project iri"
      security:
        - AccessToken: []
      parameters:
        - in: query
          name: iri
          schema:
            type: string
          description: Iri of project
          required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectIri:
                    type: string
                    description: An Iri or a QName identifying the project
                  creator:
                    type: string
                    description: An Iri or QName describing the user
                  created:
                    type: string
                    format: date-time
                    description: Creation date of this project
                  contributor:
                    type: string
                    description: An Iri or QName describing the user
                  modified:
                    type: string
                    format: date-time
                    description: Last modification date of project
                  label:
                    $ref: '#/components/schemas/LangString'
                  comment:
                    $ref: '#/components/schemas/LangString'
                  message:
                    type: string
                  shortName:
                    type: string
                    pattern: ^[a-zA-Z_][a-zA-Z0-9._-]*$
                  namespaceIri:
                    type: string
                  projectStart:
                    type: string
                    format: date
                  projectEnd:
                    type: string
                    format: date
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

  /admin/project/getid:
    get:
      summary: Get project shortname (project id) from Iri
      description: Get the project shortname from the project IRI
      security:
        - AccessToken: []
      parameters:
        - in: query
          name: iri
          schema:
            type: string
          description: Iri of project to get the id from
          required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required:
                  - id
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    LangString:
      type: object
      additionalProperties:
        type: string
      description: "Language string object where keys are language codes (e.g., 'en', 'de') and values are the translated strings"
      example:
        en: "English text"
        de: "German text"
        
  responses:
    BadRequest:
      description: "Bad Request - Invalid input parameters"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
            example:
              error: "BAD_REQUEST"
              message: "Invalid input parameters"
    
    Unauthorized:
      description: "Unauthorized - Authentication failed or insufficient permissions"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
            example:
              error: "UNAUTHORIZED"
              message: "Authentication failed"
    
    NotFound:
      description: "Not Found - Requested resource does not exist"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
            example:
              error: "NOT_FOUND"
              message: "Resource not found"
    
    Conflict:
      description: "Conflict - Resource already exists"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
            example:
              error: "CONFLICT"
              message: "Resource already exists"
    
    InternalServerError:
      description: "Internal Server Error"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
            example:
              error: "INTERNAL_SERVER_ERROR"
              message: "An internal server error occurred"

  securitySchemes:
    AccessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Access Token for authentication"