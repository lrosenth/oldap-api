---
openapi: 3.1.0
jsonSchemaDialect: "https://spec.openapis.org/oas/3.1/dialect/base"

info:
  title: OLDAP-API
  description: RESTful API for oldap
  version: 0.1.0
servers:
- url: http://127.0.0.1:5000
  description: local server...
paths:
  /admin/auth/{userId}:
    post:
      summary: Authentication/login
      description: Perform login/logout with userid/password. Returns a JWT token.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login succeeded"
                  token:
                    type: string
                    example: "exampletoken"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
    delete:
      summary: "Logout"
      description: "Logout from system"
      security:
        - AccessToken: []
      responses:
        "200":
          description: "OK"
        "400":
          description: "Several Errors that involve bad requests"
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/user/{userId}:
    put:
      summary: "Create a new user"
      description: "Create a new user with the given data"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            maxLength: 32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                givenName:
                  type: string
                familyName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  minLength: 8
                isActive:
                  type: boolean
                userIri:
                  type: string
                inProjects:
                  description: "The project field is the QName of the project,
                  the permissions is a sets of admin permissions."
                  type: array
                  items:
                    type: object
                    properties:
                      project:
                        type: string
                      permissions:
                        type: array
                        items:
                          type: string
                          enum:
                            - ADMIN_OLDAP
                            - ADMIN_USERS
                            - ADMIN_PERMISSION_SETS
                            - ADMIN_RESOURCES
                            - ADMIN_MODEL
                            - ADMIN_CREATE
                            - ADMIN_LISTS

                hasPermissions:
                  description: "Must be a list of QNames of the permission sets."
                  type: array
                  items:
                    type: string
              required:
                - givenName
                - familyName
                - password

      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User {userid} created"
                  userIri:
                    type: string
                    example: "{userIri}"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: "Delete a user"
      description: "The user that has the rights (given by his token) deletes another user"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User {userid} deleted"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
    get:
      summary: "Get user info"
      description: "Get all information about a user"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                required:
                  - creator
                  - created
                  - contributor
                  - modified
                  - userId
                  - userIri
                  - familyName
                  - givenName
                  - email
                properties:
                  creator:
                    type: string
                  created:
                    type: string
                    format: date-time
                  contributor:
                    type: string
                  modified:
                    type: string
                    format: date-time
                  userIri:
                    type: string
                  userId:
                    type: string
                  familyName:
                    type: string
                  givenName:
                    type: string
                  email:
                    type: string
                  is_active:
                    type: boolean
                  in_projects:
                    type: array
                    items:
                      type: object
                      properties:
                        project:
                          type: string
                        permissions:
                          type: array
                          items:
                            type: string
                  has_permissions:
                    type: array
                    items:
                      type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
    post:
      summary: "Modify a user"
      description: "Modify value(s) of a user definition."
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                givenName:
                  type: string
                familyName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                isActive:
                  type: boolean
                inProjects:
                  oneOf:
                    - type: object
                      properties:
                        add:
                          type: object
                          properties:
                            project:
                              type: string
                            permissions:
                              oneOf:
                                - type: array
                                  items:
                                    type: string
                                - type: "null"
                        del:
                          type: array
                          items:
                            type: string
                    - type: array
                      items:
                        type: object
                        properties:
                          project:
                            type: string
                          permissions:
                            oneOf:
                              - type: array
                                items:
                                  type: string
                              - type: object
                                properties:
                                  add:
                                    type: array
                                    items:
                                      type: string
                                  del:
                                    type: array
                                    items:
                                      type: string
                              - type: "null"
                hasPermissions:
                  oneOf:
                    - type: array
                      items:
                        type: string
                    - type: object
                      properties:
                        add:
                          type: array
                          items:
                            type: string
                        del:
                          type: array
                          items:
                            type: string
              minProperties: 1
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User {userid} created, 'userIri': '{userid}'"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/user/search:
    get:
      summary: "Searches for given user"
      description: "Search for a given user"
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          description: "userId of user"
          required: false
        - in: query
          name: familyName
          schema:
            type: string
          description: "Family name of user"
          required: false
        - in: query
          name: givenName
          schema:
            type: string
          description: "Given name of user"
          required: false
        - in: query
          name: inProject
          schema:
            type: string
          description: "Users belonging to given project"
          required: false
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                sample:
                  value:
                    - 'https://orcid.org/0000-0003-1681-4036'
                    - 'https://orcid.org/0000-0003-1485-4923'
                    - 'https://orcid.org/0000-0001-9277-3921'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'

  /admin/user/get:
    get:
      summary: "Get user by iri"
      description: "Get all user data from the user Iri"
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: iri
          schema:
            type: string
          description: Iri of user
          required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                required:
                  - creator
                  - created
                  - contributor
                  - modified
                  - userId
                  - userIri
                  - familyName
                  - givenName
                  - email
                properties:
                  creator:
                    type: string
                  created:
                    type: string
                    format: date-time
                  contributor:
                    type: string
                  modified:
                    type: string
                    format: date-time
                  userIri:
                    type: string
                  userId:
                    type: string
                  familyName:
                    type: string
                  givenName:
                    type: string
                  email:
                    type: string
                  is_active:
                    type: boolean
                  in_projects:
                    type: array
                    items:
                      type: object
                      properties:
                        project:
                          type: string
                        permissions:
                          type: array
                          items:
                            type: string
                  has_permissions:
                    type: array
                    items:
                      type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

  /admin/project/{projectId}:
    put:
      summary: Project creation
      description: Creates a new project in the database
      security:
        - AccessToken: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                projectIri:
                  type: string
                label:
                  $ref: '#/components/schemas/LangString'
                comment:
                  $ref: '#/components/schemas/LangString'
                namespaceIri:
                  type: string
                projectStart:
                  type: string
                projectEnd:
                  type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Project successfully created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: "Delete a project"
      description: "The user that has the rights (given by his token) deletes a project"
      security:
        - AccessToken: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Project successfully deleted"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: "Gets/reads Information about a project"
      description: "The user that has the rights (given by his token) gets Information about a project"
      security:
        - AccessToken: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectIri:
                    type: string
                    description: An Iri or a QName identifying the project
                  creator:
                    type: string
                    description: An Iri or QName describing the user
                  created:
                    type: string
                    format: date
                    description: Creation date of this project
                  contributor:
                    type: string
                    description: An Iri or QName describing the user
                  modified:
                    type: string
                    format: date
                    description: Last modification date of project
                  label:
                    $ref: '#/components/schemas/LangString'
                  comment:
                    $ref: '#/components/schemas/LangString'
                  message:
                    type: string
                  shortName:
                    type: string
                    pattern: ^[a-zA-Z_][a-zA-Z0-9._-]*$
                  namespaceIri:
                    type: string
                  projectStart:
                    type: string
                    format: date
                  projectEnd:
                    type: string
                    format: date
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
    post:
      summary: "Modify/updates a project"
      description: "The user that has the rights (given by his token) modifies a project"
      security:
        - AccessToken: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
                comment:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
                projectStart:
                  oneOf:
                    - type: string
                    - type: "null"
                projectEnd:
                  oneOf:
                    - type: string
                    - type: "null"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Project updated successfully'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/project/search:
    get:
      summary: "Searches for given parameters"
      description: "The user that has the rights (given by his token) searches for given parameters in projects"
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: label
          schema:
            type: string
          description: Label or part of label of project
        - in: query
          name: comment
          schema:
            type: string
          description: Comment or part of comment of project
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    projectIri:
                      type: string
                    projectShortName:
                      type: string
              examples:
                example1:
                  summary: Example response
                  value:
                    - {projectIri: "http://www.gaga/hallo", projectShortName: "hallo"}
                    - {projectIri: "mypr:project", projectShortName: "project"}
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'

  /admin/project/get:
    get:
      summary: "Get project by iri"
      description: "Get all project data from the project iri"
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: iri
          schema:
            type: string
          description: Iri of project
          required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectIri:
                    type: string
                    required: true
                    description: An Iri or a QName identifying the project
                  creator:
                    type: string
                    description: An Iri or QName describing the user
                  created:
                    type: string
                    format: date
                    description: Creation date of this project
                  contributor:
                    type: string
                    description: An Iri or QName describing the user
                  modified:
                    type: string
                    format: date
                    description: Last modification date of project
                  label:
                    $ref: '#/components/schemas/LangString'
                  comment:
                    $ref: '#/components/schemas/LangString'
                  message:
                    type: string
                  shortName:
                    type: string
                    pattern: ^[a-zA-Z_][a-zA-Z0-9._-]*$
                  namespaceIri:
                    type: string
                  projectStart:
                    type: string
                    format: date
                  projectEnd:
                    type: string
                    format: date
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

  /admin/project/getid:
    get:
      summary: Get project shortname (project id) from Iri
      description: Get the project shortname from the project IRI
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: iri
          schema:
            type: string
          description: Iri of project to get the id from
          required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required: [ id ]
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/permissionset/{definedByProject}/{permissionSetId}:
    put:
      summary: Permissionset creation
      description: Creates a new permissionset in the database
      security:
        - AccessToken: [ ]
      parameters:
        - name: definedByProject
          description: The project that defines this permission set (either the IRI or the shortname)
          in: path
          required: true
          schema:
            type: string
        - name: permissionSetId
          description: A unique identifier for the permission set (unique within the project as given by :definedByProject)
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  $ref: '#/components/schemas/LangString'
                comment:
                  $ref: '#/components/schemas/LangString'
                givesPermission:
                  type: string
                  enum:
                    - DATA_RESTRICTED
                    - DATA_VIEW
                    - DATA_EXTEND
                    - DATA_UPDATE
                    - DATA_DELETE
                    - DATA_PERMISSIONS
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Permissionset successfully created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: "Delete a permissionset"
      description: "The user that has the rights (given by his token) deletes a permissionset"
      security:
        - AccessToken: [ ]
      parameters:
        - name: definedByProject
          description: The project that defines this permission set (either the IRI or the shortname)
          in: path
          required: true
          schema:
            type: string
        - name: permissionSetId
          description: A unique identifier for the permission set (unique within the project as given by :definedByProject)
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Permissionset successfully deleted"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: "Gets/reads Information about a permissionset"
      description: "The user that has the rights (given by his token) gets Information about a permissionset"
      security:
        - AccessToken: [ ]
      parameters:
        - name: definedByProject
          description: The project that defines this permission set (either the IRI or the shortname)
          in: path
          required: true
          schema:
            type: string
        - name: permissionSetId
          description: A unique identifier for the permission set (unique within the project as given by :definedByProject)
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissionSetIri:
                    type: string
                  creator:
                    type: string
                  created:
                    type: string
                    format: date-time
                  contributor:
                    type: string
                  modified:
                    type: string
                    format: date-time
                  permissionSetId:
                    type: string
                  label:
                    $ref: '#/components/schemas/LangString'
                  comment:
                    $ref: '#/components/schemas/LangString'
                  givesPermission:
                    type: string
                  definedByProject:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

    post:
      summary: "Modify/updates a permissionset"
      description: "The user that has the rights (given by his token) modifies a permissionset"
      security:
        - AccessToken: [ ]
      parameters:
        - name: definedByProject
          description: The project that defines this permission set (either the IRI or the shortname)
          in: path
          required: true
          schema:
            type: string
        - name: permissionSetId
          description: A unique identifier for the permission set (unique within the project as given by :definedByProject)
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type:"null"
                comment:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
                givesPermission:
                  type: string
                  enum:
                    - DATA_RESTRICTED
                    - DATA_VIEW
                    - DATA_EXTEND
                    - DATA_UPDATE
                    - DATA_DELETE
                    - DATA_PERMISSIONS
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Permissionset updated successfully'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/permissionset/search:
    get:
      summary: "Searches for given parameters"
      description: "The user that has the rights (given by his token) searches for given parameters in permissionsets"
      security:
        - AccessToken: [ ]
      parameters:
        - name: label
          in: query
          schema:
            type: string
          description: "Filter by label"
          required: false  # ✅ Allows omitting this parameter
        - name: definedByProject
          in: query
          schema:
            type: string
          description: "Filter by project definition"
          required: false
        - name: givesPermission
          in: query
          schema:
            type: string
          description: "Filter by permission"
          required: false
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                sample:
                  value:
                    - 'https://orcid.org/0000-0003-1681-4036'
                    - 'https://orcid.org/0000-0003-1485-4923'
                    - 'https://orcid.org/0000-0001-9277-3921'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'

  /admin/permissionset/get:
    get:
      summary: "Get permission set by iri"
      description: "Get complete permission set data by iri"
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: iri
          schema:
            type: string
          description: Iri of permission set
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  creator:
                    type: string
                  created:
                    type: string
                    format: date-time
                  contributor:
                    type: string
                  modified:
                    type: string
                    format: date-time
                  permissionSetIri:
                    type: string
                  permissionSetId:
                    type: string
                  label:
                    $ref: '#/components/schemas/LangString'
                  comment:
                    $ref: '#/components/schemas/LangString'
                  givesPermission:
                    type: string
                  definedByProject:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/permissionset/{definedByProject}/{permissionSetId}/in_use:
    get:
      summary: Check if a permission set list is in use.
      description:
        Viewfunction to check if a hierarchical list is in use. It is in use, if any property in the datamodel references the list.
      security:
        - AccessToken: [ ]
      parameters:
        - name: definedByProject
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: permissionSetId
          description: The id of the hierarchical list
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request was successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  in_use:
                    type: boolean
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/datamodel/{project}:
    put:
      summary: Creates an empty datamodel
      description: Creates an empty datamodel to be filled later by other viewfunctions
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the new datamodel should be located
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Empty datamodel successfully created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Read a datamodel
      description:
        Viewfunction to get the information about a datamodel of a project.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The information about the datamodel of the given project is shown
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
#                    $ref: '#/components/schemas/Iri'
                    type: string
                  standaloneProperties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete the whole datamodel (!Not Reversible!)
      description:
        Viewfunction to delete the entire datamodel of a given project. Use carefully!
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Data model successfully deleted
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/datamodel/{project}/property/{property}:
    put:
      summary: Adds a standalone property to an existing datamodel
      description:
        Viewfunction to add a standalone property to an existing datamodel. A JSON is expectet that has the following form. 
        Either the class or the datatype must be given but not both at the same time. If the datatype is given, then all fields are optional. 
        If the class is given, only subPropertyOf, name and desctiption are allowed.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: property
          description: The name (Iri) of the property one wish to add
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Standalone property in datamodel {project} successfully created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete an entire standalone property inside the datamodel of a project
      description:
        Viewfunction that deletes an entire standalone property inside the projects datamodel
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: property
          description: The name (Iri) of the property one wish to delete
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Standalone property in datamodel {project} successfully deleted"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Modify a standalone property
      description:
        Viewfunction to modify a standalone property. A JSON is expected that has the following form. At least one field
        must be given. All fields are optional. At least one field must be given.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: property
          description: The name (Iri) of the property one wish to modify
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              additionalProperties: false
              properties:
                datatype:
                  description: The datatype of the property
                  type: string
                class:
                  description: Iri of the resource class the property must point to
                  type: string
                name:
                  description: Human readable Name.
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
                description:
                  description: A description of the property.
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
                languageIn:
                  oneOf:
                    - type: array
                      description: The languages that are allowed in the property
                      example: [ "en", "fr", "it", "de" ]
                      items:
                        type: string
                    - type: "null"
                uniqueLang:
                  type: boolean
                  description: Describes if each language must be present only once. This field is only applicable if the property is of datatype langstring.
                  example: True
                inSet:
                  oneOf:
                    - type: array
                      example: [ "Renault", "Opel", "BMW", "Mercedes" ]
                      items:
                        oneOf:
                          - type: string
                          - type: number
                          - type: integer
                    - type: "null"
                minLength:
                  description: Only applicable in xsd:string and rdf:langString. Denotes the minimal length of the string.
                  oneOf:
                    - type: integer
                      example: 1
                    - type: number
                      format: float
                      example: 1.1
                    - type: "null"
                maxLength:
                  description: Only applicable in xsd:string and rdf:langString. Denotes the maximal length of the string.
                  oneOf:
                    - type: integer
                      example: 1
                    - type: number
                      format: float
                      example: 1.1
                    - type: "null"
                pattern:
                  description: Tells if the string must follow a certain regex pattern. Only applicable in xsd:string and rdf:langString.
                  oneOf:
                    - type: string
                      example: r"^[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z]{2,}$"
                    - type: "null"
                minExclusive:
                  description: Minimal value (exclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
                  oneOf:
                    - type: number
                      format: float
                      example: 5.5
                    - type: integer
                      example: 5
                    - type: "null"
                minInclusive:
                  description: Minimal value (inclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
                  oneOf:
                    - type: number
                      format: float
                      example: 5.5
                    - type: integer
                      example: 5
                    - type: "null"
                maxExclusive:
                  description: Maximal value (exclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
                  oneOf:
                    - type: number
                      format: float
                      example: 5.5
                    - type: integer
                      example: 5
                    - type: "null"
                maxInclusive:
                  description: Maximal value (inclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
                  oneOf:
                    - type: number
                      format: float
                      example: 5.5
                    - type: integer
                      example: 5
                    - type: "null"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Data model successfully modified"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/datamodel/{project}/{resource}:
    put:
      summary: creates a new resource in a datamodel
      description:
        Viewfunction to add a resource to an existing datamodel. A JSON is expectet that has the following form. 
        In the hasProperty, either the class or the datatype must be given but not both at the same time. If the datatype is given, then all fields are optional. 
        If the class is given, only subPropertyOf, name and desctiption are allowed.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: resource
          description: The name (Iri) of the resource one wish to add
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resource in datamodel {project} successfully created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Deletes an entire resource inside a datamodel of a given project
      description:
        Viewfunction that deletes an entire resource inside the projects datamodel
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: resource
          description: The name (Iri) of the resource one wish to delete
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resource in datamodel {project} successfully deleted"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Modifies a resource in a datamodel
      description: >
        Viewfunction to modify a resource. A JSON is expected that has the following form. All fields are optional -- at least one needs to be given
        Note: To modify the fields of a property of the resource -- use modify_attribute_in_has_prop instead.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: resource
          description: The name (Iri) of the resource one wish to add
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                closed:
                  description: The standard closed constraint of RDF. See https://www.w3.org/TR/shacl/#ClosedConstraintComponent
                  type: boolean
                  example: True
                superclass:
                  oneOf:
                    - type: array
                      items:
                        type: string
                    - type: object
                      properties:
                        add:
                          type: array
                          items:
                            type: string
                        del:
                          type: array
                          items:
                            type: string
                    - type: "null"
                label:
                  description: A label for the resource.
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
                comment:
                  description: A description of the resource.
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Data model successfully modified"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/datamodel/{project}/{resource}/{property}:
    put:
      summary: creates a new property inside a resource in a datamodel
      description:
        Viewfunction to add a property to an existing resource inside a datamodel. A JSON is expectet that has the following form. 
        In the hasProperty, either the class or the datatype must be given but not both at the same time. If the datatype is given, then all fields are optional. 
        If the class is given, only subPropertyOf, name and desctiption are allowed.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: resource
          description: The name (Iri) of the resource where the property should be added
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
        - name: property
          description: The name (Iri) of the property one wish to add
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Property'
                - type: object
                  additionalProperties: false
                  properties:
                    maxCount:
                      description: Denotes how often (maximum) this property can be used in one resource
                      oneOf:
                        - type: integer
                        - type: number
                      example: 3
                    minCount:
                      description: Denotes how often (minimal) this property must be used in one resource
                      oneOf:
                        - type: integer
                        - type: number
                      example: "null"
                    order:
                      description: Hint for GUI. Tells order of properties for a GUI
                      oneOf:
                        - type: integer
                        - type: number
                      example: 3
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Property in resource {resource} in datamodel {project} successfully created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Deletes a property inside a resource in a datamodel
      description:
        Viewfunction that deletes an entire property inside a resource that is located in the projects datamodel
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: resource
          description: The name (Iri) of the resource where the property should be deleted
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
        - name: property
          description: The name (Iri) of the property one wish to delete
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Property in resource {resource} in datamodel {project} successfully deleted"
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Modifies a property inside a resource in a datamodel
      description:
        Viewfunction to modify the fields of a single property inside a resource.A JSON is expected that has the following form.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: resource
          description: The name (Iri) of the resource where the property should be added
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
        - name: property
          description: The name (Iri) of the property one wish to add
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                property:
                  $ref: '#/components/schemas/Property'
                maxCount:
                  description: Denotes how often (maximum) this property can be used in one resource
                  oneOf:
                    - type: integer
                    - type: number
                    - type: "null"
                minCount:
                  description: Denotes how often (minimal) this property must be used in one resource
                  oneOf:
                    - type: integer
                    - type: number
                    - type: "null"
                order:
                  description: Hint for GUI. Tells order of properties for a GUI
                  oneOf:
                    - type: integer
                    - type: number
                    - type: "null"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Data model successfully modified"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/hlist/{project}/upload:
    post:
      summary: Upload a hierarchical list in YAML format
      description: Uploads a hierarchical list to a specific project via a YAML file.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          in: path
          required: true
          schema:
            type: string
          description: The project identifier
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                yamlfile:
                  type: string
                  format: binary
                  description: The YAML file to upload
      responses:
        '200':
          description: Upload successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: File successfully uploaded
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'

  /admin/hlist/{project}/{hlistid}:
    put:
      summary:
        Viewfunction to create an empty hierarchical list. A JSON is expected that has the following form.
      description:
        Creates an empty hierarchical list. Later to be filled with nodes.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the h-list sould be located
          in: path
          required: true
          schema:
            type: string
        - name: hlistid
          description: The id of the hierarchical list
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prefLabel:
                  $ref: '#/components/schemas/LangString'
                  description: A prefLabel for the h-list.
                definition:
                  $ref: '#/components/schemas/LangString'
                  description: The skos:definition of the h-list that describes the concept of the elements of the h-list.
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Hierarchical list successfully created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Change the metadata of a hierarchical list
      description:
        Viewfunction to modify the metadata of a hierarchical list
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the h-list sould be located
          in: path
          required: true
          schema:
            type: string
        - name: hlistid
          description: The id of the hierarchical list
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prefLabel:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
                definition:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Hierarchical list successfully created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a hierarchical list
      description:
        Viewfunction to delete a hierarchical list
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the hierarchical list which should be deleted
          in: path
          required: true
          schema:
            type: string
        - name: hlistid
          description: The id of the hierarchical list
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Hierarchical list has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Hierarchical list successfully deleted"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Read a hierarchical list.
      description:
        Viewfunction to get the information about a hierarchical of a project. A (hierarchical) ordered List of all the nodes will be delivered.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: hlistid
          description: The id of the hierarchical list
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response with the hierarchical list. This call loads the complete list!
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                  - type: array
                  - type: string
                  - type: number
                  - type: boolean
                  - type: null
              example:
                - contributor: https://orcid.org/0000-0003-1681-4036
                  created: '2025-04-25T17:39:56.637331+02:00'
                  creator: https://orcid.org/0000-0003-1681-4036
                  definition:
                    - testrootnodedefinition@en
                  modified: '2025-04-25T17:39:56.637331+02:00'
                  oldapListNodeId: nodeA
                  prefLabel:
                    - testrootnodelabel@en
                - contributor: https://orcid.org/0000-0003-1681-4036
                  created: '2025-04-25T17:39:57.974365+02:00'
                  creator: https://orcid.org/0000-0003-1681-4036
                  definition:
                    - testrootnodedefinition@en
                  modified: '2025-04-25T17:39:57.974365+02:00'
                  nodes:
                    - contributor: https://orcid.org/0000-0003-1681-4036
                      created: '2025-04-25T17:39:58.331659+02:00'
                      creator: https://orcid.org/0000-0003-1681-4036
                      definition:
                        - testrootnodedefinition@en
                      modified: '2025-04-25T17:39:58.331659+02:00'
                      oldapListNodeId: nodeBA
                      prefLabel:
                        - testrootnodelabel@en
                  oldapListNodeId: nodeB
                  prefLabel:
                    - testrootnodelabel@en

        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/hlist/{project}/{hlistid}/in_use:
    get:
      summary: Check if a hierarchical list is in use.
      description:
        Viewfunction to check if a hierarchical list is in use. It is in use, if any property in the datamodel references the list.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: hlistid
          description: The id of the hierarchical list
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The request was successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  in_use:
                    type: boolean
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/hlist/{project}/{hlistid}/download:
    get:
      summary: Download a hierarchical list
      description: |
        Downloads a hierarchical list as YAML or JSON depending on the `format` query parameter.
        The user must be authenticated with a Bearer token.
      operationId: downloadHList
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          in: path
          required: true
          description: Project identifier
          schema:
            type: string
        - name: hlistid
          in: path
          required: true
          description: Hierarchical list ID
          schema:
            type: string
        - name: format
          in: query
          required: false
          description: Desired format of the output file. Accepts `YAML` (default) or `JSON`.
          schema:
            type: string
            enum: [YAML, JSON]
      responses:
        "200":
          description: Successful download of the list
          content:
            application/x-yaml:
              schema:
                type: string
                example: |
                  name: Example List
                  items:
                    - id: a
                      label: "Item A"
            application/json:
              schema:
                type: object
                example:
                  name: "Example List"
                  items:
                    - id: "a"
                      label: "Item A"
          headers:
            Content-Disposition:
              description: File download name
              schema:
                type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/hlist/{project}/{hlistid}/{nodeid}:
    get:
      summary: Get the information of the given hlist node
      description: |
        Viewfunction to retrieve all information of the given node
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: hlistid
          description: The id of the hierarchical list
          in: path
          required: true
          schema:
            type: string
        - name: nodeid
          description: The id of the node that will be added
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodeid:
                    type: string
                  creator:
                    type: string
                  created:
                    type: string
                    format: date-time
                  contributor:
                    type: string
                  modified:
                    type: string
                    format: date-time
                  prefLabel:
                    $ref: '#/components/schemas/LangString'
                  description:
                    $ref: '#/components/schemas/LangString'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "403":
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: Adds a new node to an existing hlist
      description: |
        Viewfunction to add a new node to an existing hierarchical list. A JSON is expected that has the following form.
        Note: if the position is "root", then "refnode" must be omitted.
        
        Example JSON:
        {
          "prefLabel": ["testrootnodelabel@en"],
          "definition": ["testrootnodedefinition@en"],
          "position": "leftOf",
          "refnode": "nodeA"
        }
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: hlistid
          description: The id of the hierarchical list
          in: path
          required: true
          schema:
            type: string
        - name: nodeid
          description: The id of the node that will be added
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - prefLabel
                    - position
                    - refnode
                  properties:
                    prefLabel:
                      $ref: '#/components/schemas/LangString'
                      description: A label for the h-list.
                    definition:
                      $ref: '#/components/schemas/LangString'
                      description: The skos:definition of the node that describes the concept of the node-element.
                    position:
                      description: The position relative to another node.
                      type: string
                      enum:
                        - belowOf
                        - leftOf
                        - rightOf
                      example: leftOf
                    refnode:
                      description: The nodeid of the target node
                      type: string
                      example: "nodeA"
                - type: object
                  required:
                    - prefLabel
                    - position
                  properties:
                    prefLabel:
                      $ref: '#/components/schemas/LangString'
                      description: A label for the h-list.
                    definition:
                      $ref: '#/components/schemas/LangString'
                      description: The skos:definition of the node that describes the concept of the node-element.
                    position:
                      description: The node is inserted as a new root node.
                      type: string
                      enum:
                        - root
                      example: root
            example:
              prefLabel:
                - "testrootnodelabel@en"
              definition:
                - "testrootnodedefinition@en"
              position: "leftOf"
              refnode: "nodeA"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Node successfully created"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Deletes a node inside a hierarchical list
      description: |
        Viewfunction that deletes a node from the hierarchical list
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: hlistid
          description: The id of the hierarchical list
          in: path
          required: true
          schema:
            type: string
        - name: nodeid
          description: The id of the node that should be deleted
          in: path
          required: true
          schema:
            type: string
        - name: recursive
          in: query
          required: false
          description: >
            If set, delete the node and its children. Interprets any of
            ["1", "true", "yes", "on"] as true (case-insensitive).
          schema:
            type: string
            enum: ["1", "true", "yes", "on", "0", "false", "no", "off"]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Node successfully deleted"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Modify a node inside a hierarchical list
      description: |
        Viewfunction to modify the parameters of a node
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: hlistid
          description: The id of the hierarchical list
          in: path
          required: true
          schema:
            type: string
        - name: nodeid
          description: The id of the node that should be deleted
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prefLabel:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
                definition:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                    - type: "null"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Node successfully modified"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/hlist/{project}/{hlistid}/{nodeid}/move:
    post:
      summary: Moves a node inside a hierarchical list
      description: |
        Viewfunction that moves a node inside the hierarchical list from one place to another.
        When there are any number of nodes below the node one wish to move, they get moved automatically alongside the other node.
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: hlistid
          description: The id of the hierarchical list
          in: path
          required: true
          schema:
            type: string
        - name: nodeid
          description: The id of the node that should be deleted
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - leftOf
                  properties:
                    leftOf:
                      type: string
                      description: The id of the target node to the left of which the node will be moved
                - type: object
                  required:
                    - rightOf
                  properties:
                    rightOf:
                      type: string
                      description: The id of the target node to the right of which the node will be moved
                - type: object
                  required:
                    - belowOf
                  properties:
                    belowOf:
                      type: string
                      description: The id of the target node below which the node will be moved
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Node successfully moved"
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /admin/hlist/search:
    get:
      summary: "Searches for given user"
      description: "Search for a given user"
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: project
          schema:
            type: string
          description: "Project shortname or IRI"
          required: false
        - in: query
          name: hlist
          schema:
            type: string
          description: "ID of hlist"
          required: false
        - in: query
          name: prefLabel
          schema:
            type: string
          description: "SKOS preferred label (may be LangString, e.g. mylabel@en)"
          required: false
        - in: query
          name: definition
          schema:
            type: string
          description: "SKOS definition (may be Langstring, e.g. mydesc@en"
          required: false
        - in: query
          name: exactMatch
          schema:
            type: boolean
          description: "If true, an exact match is required"
          required: false
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ['https://orcid.org/0000-0003-1681-4036', 'https://orcid.org/0000-0003-1485-4923', 'https://orcid.org/0000-0001-9277-3921']
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'

  /admin/hlist/get:
    get:
      summary: "Get hlist by iri"
      description: "Get all hlist data from the hlist iri"
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: iri
          schema:
            type: string
          description: Iri of hlist
          required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  hlistIri:
                    type: string
                    description: An Iri or a QName identifying the hlist
                  creator:
                    type: string
                    description: An Iri or QName describing the user
                  created:
                    type: string
                    format: date
                    description: Creation date of this project
                  contributor:
                    type: string
                    description: An Iri or QName describing the user
                  modified:
                    type: string
                    format: date
                    description: Last modification date of project
                  hlistId:
                    type: string
                    description: The hlist ID as sting
                  prefLabel:
                    $ref: '#/components/schemas/LangString'
                  definition:
                    $ref: '#/components/schemas/LangString'
                  nodeNamespaceIri:
                    type: string
                  nodeClassIri:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

  /data/{project}/{resclass}:
    put:
      summary: Create a new instance of the resource class
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: resclass
          description: The name of the resource (NCName, *not* QName!)
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  iri:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'

  /data/{project}/get/{instance}:
    get:
      summary: Get an instance of a resource only based on it's IRO
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: instance
          description: The IRI of the instance
          in: path
          required: true
          schema:
            type: string
            format: iri

  /data/{project}/{resclass}/{instance}:
    put:
      summary: Create a new instance of the given resource class with the given IRI
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: resclass
          description: The name of the resource (NCName, *not* QName!)
          in: path
          required: true
          schema:
            type: string
        - name: instance
          description: The IRI of the instance
          in: path
          required: true
          schema:
            type: string
            format: iri
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $resf: '#/components/responses/InternalServerError'

    post:
      summary: Modify an instance of the given resource class
      security:
        - AccessToken: [ ]
      parameters:
        - name: project
          description: The name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: resclass
          description: The name of the resource (NCName, *not* QName!)
          in: path
          required: true
          schema:
            type: string
        - name: instance
          description: The IRI of the instance
          in: path
          required: true
          schema:
            type: string
            format: iri
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Unauthorized'



components:
  schemas:
    user_get_body_200:
      type: object
      properties:
        userIri:
          type: string
        userId:
          type: string
        familyName:
          type: string
        givenName:
          type: string
        in_projects:
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
        has_permissions:
          type: array
          items:
            type: string
    user_get_body_401:
      type: object
      properties:
        message:
          type: string
          example: "Connection failed: {OldapError}"
    admin_project_body:
      type: object
      properties:
        projectIri:
          type: string
        projectShortName:
          type: string
        label:
          type: string
        comment:
          type: string
        namespaceIri:
          type: string
        projectStart:
          type: string
        projectEnd:
          type: string
    project_response_200:
      type: object
      properties:
        message:
          type: string

    admin_auth_body:
      type: object
      properties:
        password:
          type: string
      required:
        - password
    auth_response_200:
      type: object
      properties:
        token:
          type: string
    auth_response_400:
      description: if no JSON is sent
      type: object
      properties:
        message:
          type: string
          example: "Invalid content type, JSON required"
    auth_response_401:
      description: "If connection to server fails due to incorrect token"
      type: object
      properties:
        message:
          type: string
          example: "{OldapError}"
    auth_response_404:
      description: if user not found
      type: object
      properties:
        message:
          type: string
          example: "User {userId} not found"
    new_user:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        password:
          type: string
          minLength: 8
        isActive:
          type: boolean
        userIri:
          type: string
        inProjects:
          description: "The project field is the QName of the project,
          the permissions is a sets of admin permissions."
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
                  enum:
                    - ADMIN_OLDAP
                    - ADMIN_USERS
                    - ADMIN_PERMISSION_SETS
                    - ADMIN_RESOURCES
                    - ADMIN_MODEL
                    - ADMIN_CREATE

        hasPermissions:
          description: "Lust be a list of QNames of the permission sets."
          type: array
          items:
            type: string
      required:
        - givenName
        - familyName
        - password

    mod_user:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        password:
          type: string
        inProjects:
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
        hasPermissions:
          type: array
          items:
            type: string

    LangString:
      oneOf:
        - type: array
          description: List of strings, each with an optional language tag (e.g., ["Lastname@en", "Nachname@de"])
          items:
            type: string
          example: ["Eine Buchseite@de", "A page of a book@en"]
        - type: string
          description: Single string with optional language tag (e.g., "Lastname@en").
          example: "A page of a book@en"
        - type: "null"

    Iri:
      type: string
      pattern: "^[a-zA-Z0-9_-]+:[a-zA-Z0-9_-]+$"
      description: "IRI in the format 'project:object', where 'project' is the project name and 'object' is the object name."
      example: "myproj:pageOf"

    Property:
      type: object
      additionalProperties: false
      properties:
        creator:
          type: string
        created:
          type: string
          format: date-time
        contributor:
          type: string
        modified:
          type: string
          format: date-time
        projectid:
          type: string
          description: ID of project the property is defined in
        iri:
          type: string
          description: Iri of property
        subPropertyOf:
          $ref: '#/components/schemas/Iri'
          description: Iri() of the the Superclass, e.g. "myproj:partOf" ; partOf would be generic case of pageOf
          example: "hyha:testProp"
        class:
          oneOf:
            - $ref: '#/components/schemas/Iri'
            - type: "null"
          description: An Iri() that describes the class of the instance on which this property must point e.g. "myproj:Book" means that the property points on book.
          example: "xml:Date"
        datatype:
          oneOf:
            - type: string
            - type: "null"
          description: xsd_datatype if the property is represented via a literal
          example: "rdf:langString"
        name:
          description: Human readable Name.
          oneOf:
            - $ref: '#/components/schemas/LangString'
            - type: object
              properties:
                add:
                  $ref: '#/components/schemas/LangString'
                del:
                  $ref: '#/components/schemas/LangString'
            - type: "null"
        description:
          description: A description of the property.
          oneOf:
            - $ref: '#/components/schemas/LangString'
            - type: object
              properties:
                add:
                  $ref: '#/components/schemas/LangString'
                del:
                  $ref: '#/components/schemas/LangString'
            - type: "null"
        languageIn:
          oneOf:
            - type: array
              description: The languages that are allowed in the property
              example: [ "en", "fr", "it", "de" ]
              items:
                type: string
            - type: "null"
        uniqueLang:
          type: boolean
          description: Describes if each language must be present only once. This field is only applicable if the property is of datatype langstring.
          example: True
        inSet:
          oneOf:
            - type: array
              example: [ "Renault", "Opel", "BMW", "Mercedes" ]
              items:
                type: string
            - type: "null"
        minLength:
          description: Only applicable in xsd:string and rdf:langString. Denotes the minimal length of the string.
          oneOf:
            - type: integer
              example: 1
            - type: number
              format: float
              example: 1.1
            - type: "null"
        maxLength:
          description: Only applicable in xsd:string and rdf:langString. Denotes the maximal length of the string.
          oneOf:
            - type: integer
              example: 1
            - type: number
              format: float
              example: 1.1
            - type: "null"
        pattern:
          description: Tells if the string must follow a certain regex pattern. Only applicable in xsd:string and rdf:langString.
          oneOf:
            - type: string
              example: r"^[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z]{2,}$"
            - type: "null"
        minExclusive:
          description: Minimal value (exclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
          oneOf:
            - type: number
              format: float
              example: 5.5
            - type: integer
              example: 5
            - type: "null"
        minInclusive:
          description: Minimal value (inclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
          oneOf:
            - type: number
              format: float
              example: 5.5
            - type: integer
              example: 5
            - type: "null"
        maxExclusive:
          description: Maximal value (exclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
          oneOf:
            - type: number
              format: float
              example: 5.5
            - type: integer
              example: 5
            - type: "null"
        maxInclusive:
          description: Maximal value (inclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
          oneOf:
            - type: number
              format: float
              example: 5.5
            - type: integer
              example: 5
            - type: "null"
        lessThan:
          description: The given numerical value must be smaller than the value of the given reverenced IRI property e.g. Iri("myproj:deathDate")
          $ref: '#/components/schemas/Iri'
        lessThanOrEquals:
          description: The given numerical value must be smaller or equal compared to the value of the given reverenced IRI property e.g. Iri("myproj:deathDate")
          $ref: '#/components/schemas/Iri'

    Resource:
      type: object
      properties:
        creator:
          type: string
        created:
          type: string
          format: date-time
        contributor:
          type: string
        modified:
          type: string
          format: date-time
        label:
          $ref: '#/components/schemas/LangString'
          description: A label for the resource.
        superclass:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
        comment:
          $ref: '#/components/schemas/LangString'
          description: A comment for the resource.
        closed:
          description: The standard closed constraint of RDF. See https://www.w3.org/TR/shacl/#ClosedConstraintComponent
          type: boolean
          example: True
        hasProperty:
          type: array
          items:
            type: object
            properties:
              property:
                oneOf:
                  - allOf:
                      - type: object
                        properties:
                          iri:
                            $ref: '#/components/schemas/Iri'
                            description: The Iri of the property inside the resource.
                            example: "hyha:testProp"
                      - $ref: '#/components/schemas/Property'
                  - $ref: '#/components/schemas/Iri'
                    description: The Iri that references an already existing standalone property
              maxCount:
                description: Denotes how often (maximum) this property can be used in one resource
                type: number
                example: 3
              minCount:
                description: Denotes how often (minimal) this property must be used in one resource
                type: number
                example: 1
              order:
                description: Hint for GUI. Tells order of properties for a GUI
                type: number
                example: 2

    Error:
      type: object
      properties:
        message:
          type: string
          description: "Human-readable error message"
        error:
          type: string
          description: "Error code or type"
        details:
          type: object
          description: "Additional error details (optional)"
          additionalProperties: true
      required:
        - message
      example:
        message: "An error occurred"
        error: "ERROR_CODE"

  responses:
    BadRequest:
      description: "Error 400: Bad Request - Invalid input parameters, malformed request, or validation errors"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: "Error 401: Unauthorized - Authentication failed, invalid token, or missing credentials"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: "Error 403: Forbidden - Insufficient permissions to perform the requested operation"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: "Error 404: Not Found - Requested resource does not exist"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: "Error 409: Conflict - Resource already exists or operation conflicts with current state"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    InternalServerError:
      description: "Error 500: Internal Server Error - Unexpected server error occurred"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'






  securitySchemes:
    AccessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
