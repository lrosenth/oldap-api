---
openapi: 3.0.0
info:
  title: OLDAP-API
  description: RESTful API for oldap
  version: 0.1.0
servers:
- url: http://127.0.0.1:5000
  description: local server...
paths:
  /admin/auth/{userId}:
    post:
      summary: Authentification/login
      description: Perform login/logout with userid/password. Returns a JWT token.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
                properties:
                  password:
                    type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
        400:
          description: "Invalid content type"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Invalid content type, JSON required"
        "403":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Wrong credentials"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userId} not found"
    delete:
      summary: "Logout"
      description: "Logout from system"
      security:
        - AccessToken: []
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        500:
          description: "Internal Server error"
  /admin/user/{userId}:
    get:
      summary: "Get user info"
      description: "Get all information about a user"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  userIri:
                    type: string
                  userId:
                    type: string
                  family_name:
                    type: string
                  given_name:
                    type: string
                  is_active:
                    type: string
                  in_projects:
                    type: array
                    items:
                      type: object
                      properties:
                        project:
                          type: string
                        permissions:
                          type: array
                          items:
                            type: string
                  has_permissions:
                    type: array
                    items:
                      type: string
        "403":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OmasError}"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userId} not found"
    delete:
      summary: "Delete a user"
      description: "The user that has the rights (given by his token) deletes another user"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userid} deleted"
        "403":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OmasError}//Actor has no ADMIN_USERS permission for project {proj}"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userId} not found"
    put:
      summary: "Create a new user"
      description: "Create a new user with the given data"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            maxLength: 32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                givenName:
                  type: string
                familyName:
                  type: string
                password:
                  type: string
                  minLength: 8
                isActive:
                  type: boolean
                userIri:
                  type: string
                inProjects:
                  description: "The project field is the QName of the project,
                  the permissions is a sets of admin permissions."
                  type: array
                  items:
                    type: object
                    properties:
                      project:
                        type: string
                      permissions:
                        type: array
                        items:
                          type: string
                          enum:
                            - ADMIN_OLDAP
                            - ADMIN_USERS
                            - ADMIN_PERMISSION_SETS
                            - ADMIN_RESOURCES
                            - ADMIN_MODEL
                            - ADMIN_CREATE

                hasPermissions:
                  description: "Lust be a list of QNames of the permission sets."
                  type: array
                  items:
                    type: string
              required:
                - givenName
                - familyName
                - password

      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userid} created"
                  userIri:
                    type: string
                    example: "{userIri}"
        400:
          description: "Feldrequirement fehlt"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Missing field {field_name}//JSON expected. Instead received {request.content_type}//The given projectname is not a valid anyIri"
        403:
          description: "Connection failed"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OmasError}"
        409:
          description: "Userid or useriri already exists"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "A user with a user ID {userId} already exists"
        500:
          description: "Internal Server error"
    post:
      summary: "Modify a user"
      description: "Modify value(s) of a user definition."
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                givenName:
                  type: string
                familyName:
                  type: string
                password:
                  type: string
                isActive:
                  type: string
                inProjects:
                  type: array
                  items:
                    type: object
                    properties:
                      project:
                        type: string
                      permissions:
                        type: array
                        items:
                          type: string
                hasPermissions:
                  type: array
                  items:
                    type: string
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userid} created, 'userIri': '{userid}'"
        400:
          description: "Form/Inhalt der Ã¼bermittelten Daten stimmt nicht"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "JSON expected. Instead received {request.content_type}"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OmasError}"
        404:
          description: "Userid not found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "A user with a user ID '{userId}' already exists"
        500:
          description: "Internal Server error"

  /admin/project/{projectId}:
    put:
      summary: Project creation
      description: Creates a new project in the database
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                projectIri:
                  type: string
                label:
                  $ref: '#/components/schemas/LangString'
                comment:
                  $ref: '#/components/schemas/LangString'
                namespaceIri:
                  type: string
                projectStart:
                  type: string
                projectEnd:
                  type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Project successfully created"
        400:
          description: "Invalid content type"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Invalid content type, JSON required//A meaningful label and comment need to be provided and can not be empty (...)"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "No permission to create a new project.//Connection failed: {str(error)}"
        409:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'A Project with a projectIri "http://unittest.org/project/testproject" already exists'
        500:
          description: "Internal Server error"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string

    delete:
      summary: "Delete a project"
      description: "The user that has the rights (given by his token) deletes a project"
      security:
        - AccessToken: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Project successfully deleted"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OmasError}//No permission to delete project {project}."
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project with IRI/shortname "nonexistingproject" not found.'
        500:
          description: "Internal Server error"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string

    get:
      summary: "Gets/reads Information about a project"
      description: "The user that has the rights (given by his token) gets Information about a project"
      security:
        - AccessToken: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  project:
                    type: string
                  creation:
                    type: string
                  modified:
                    type: string
                  label:
                    type: string
                  comment:
                    type: string
                  message:
                    type: string
                  shortName:
                    type: string
                  namespace IRI:
                    type: string
                  project start:
                    type: string
                  project end:
                    type: string
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OmasError}"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project with IRI/shortname "projectdoesnotexist" not found.'

    post:
      summary: "Modify/updates a project"
      description: "The user that has the rights (given by his token) modifies a project"
      security:
        - AccessToken: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                label:
                  type: string
                comment:
                  type: string
                projectStart:
                  type: string
                projectEnd:
                  type: string
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project updated successfully'
        400:
          description: "Expected JSON, received something else"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "JSON expected. Instead received {request.content_type}"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'projectShortName, projectIri and namespaceIri must not be modified//Connection failed: {str(error)}//No permission to create a new project.'
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project with IRI/shortname "notexistingproject" not found.'
        500:
          description: "Internal Server error"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string

  /admin/project/search:
    get:
      summary: "Searches for given parameters"
      description: "The user that has the rights (given by his token) searches for given parameters in projects"
      security:
        - AccessToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              properties:
                label:
                  type: string
                comment:
                  type: string
                projectStart:
                  type: string
                projectEnd:
                  type: string
        required: true

      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: '[Iri("http://unittest.org/project/testproject")]'
        400:
          description: "Expected JSON, received something else//Either label or comment needs to be provided"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "JSON expected. Instead received {request.content_type}"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OmasError}"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'No matching projects found.'
        500:
          description: "Internal Server error"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string

components:
  schemas:
    user_get_body_200:
      type: object
      properties:
        userIri:
          type: string
        userId:
          type: string
        family_name:
          type: string
        given_name:
          type: string
        in_projects:
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
        has_permissions:
          type: array
          items:
            type: string
    user_get_body_401:
      type: object
      properties:
        message:
          type: string
          example: "Connection failed: {OmasError}"
    admin_project_body:
      type: object
      properties:
        projectIri:
          type: string
        projectShortName:
          type: string
        label:
          type: string
        comment:
          type: string
        namespaceIri:
          type: string
        projectStart:
          type: string
        projectEnd:
          type: string
    project_response_200:
      type: object
      properties:
        message:
          type: string

    admin_auth_body:
      type: object
      properties:
        password:
          type: string
      required:
        - password
    auth_response_200:
      type: object
      properties:
        token:
          type: string
    auth_response_400:
      description: if no JSON is sent
      type: object
      properties:
        message:
          type: string
          example: "Invalid content type, JSON required"
    auth_response_401:
      description: "If connection to server fails due to incorrect token"
      type: object
      properties:
        message:
          type: string
          example: "{OmasError}"
    auth_response_404:
      description: if user not found
      type: object
      properties:
        message:
          type: string
          example: "User {userId} not found"
    new_user:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        password:
          type: string
          minLength: 8
        isActive:
          type: boolean
        userIri:
          type: string
        inProjects:
          description: "The project field is the QName of the project,
          the permissions is a sets of admin permissions."
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
                  enum:
                    - ADMIN_OLDAP
                    - ADMIN_USERS
                    - ADMIN_PERMISSION_SETS
                    - ADMIN_RESOURCES
                    - ADMIN_MODEL
                    - ADMIN_CREATE

        hasPermissions:
          description: "Lust be a list of QNames of the permission sets."
          type: array
          items:
            type: string
      required:
        - givenName
        - familyName
        - password

    mod_user:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        password:
          type: string
        inProjects:
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
        hasPermissions:
          type: array
          items:
            type: string

    LangString:
          oneOf:
            - type: string
              description: Single string with optional language tag (e.g., "Lastname@en").
            - type: array
              description: List of strings, each with an optional language tag (e.g., ["Lastname@en", "Nachname@de"])
              items:
                type: string


  securitySchemes:
    AccessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

