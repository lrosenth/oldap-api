---
openapi: 3.1.0
info:
  title: OLDAP-API
  description: RESTful API for oldap
  version: 0.1.0
servers:
- url: http://127.0.0.1:5000
  description: local server...
paths:
  /admin/auth/{userId}:
    post:
      summary: Authentification/login
      description: Perform login/logout with userid/password. Returns a JWT token.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
                properties:
                  password:
                    type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Login succeeded"
                  token:
                    type: string
                    example: "exampletoken"
        400:
          description: "Several Errors that involve bad requests"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Invalid content type, JSON required"
        "403":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: Wrong credentials"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userId} not found"
    delete:
      summary: "Logout"
      description: "Logout from system"
      security:
        - AccessToken: []
      responses:
        "200":
          description: "OK"
        "400":
          description: "Several Errors that involve bad requests"
        500:
          description: "Internal Server error. Should not be reachable"
  /admin/user/{userId}:
    put:
      summary: "Create a new user"
      description: "Create a new user with the given data"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            maxLength: 32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                givenName:
                  type: string
                familyName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  minLength: 8
                isActive:
                  type: boolean
                userIri:
                  type: string
                inProjects:
                  description: "The project field is the QName of the project,
                  the permissions is a sets of admin permissions."
                  type: array
                  items:
                    type: object
                    properties:
                      project:
                        type: string
                      permissions:
                        type: array
                        items:
                          type: string
                          enum:
                            - ADMIN_OLDAP
                            - ADMIN_USERS
                            - ADMIN_PERMISSION_SETS
                            - ADMIN_RESOURCES
                            - ADMIN_MODEL
                            - ADMIN_CREATE

                hasPermissions:
                  description: "Must be a list of QNames of the permission sets."
                  type: array
                  items:
                    type: string
              required:
                - givenName
                - familyName
                - password

      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userid} created"
                  userIri:
                    type: string
                    example: "{userIri}"
        400:
          description: "Several Errors that involve bad requests"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Missing field {field_name}//JSON expected. Instead received {request.content_type}//The given projectname is not a valid anyIri"
        403:
          description: "Connection failed"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}"
        409:
          description: "Userid or useriri already exists"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "A user with a user ID {userId} already exists"
        500:
          description: "Internal Server error. Should not be reachable"
    delete:
      summary: "Delete a user"
      description: "The user that has the rights (given by his token) deletes another user"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userid} deleted"
        "403":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}//Actor has no ADMIN_USERS permission for project {proj}"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userId} not found"
    get:
      summary: "Get user info"
      description: "Get all information about a user"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                required:
                  - creator
                  - created
                  - contributor
                  - modified
                  - userId
                  - userIri
                  - family_name
                  - given_name
                  - email
                properties:
                  creator:
                    type: string
                  created:
                    type: string
                    format: date-time
                  contributor:
                    type: string
                  modified:
                    type: string
                    format: date-time
                  userIri:
                    type: string
                  userId:
                    type: string
                  family_name:
                    type: string
                  given_name:
                    type: string
                  email:
                    type: string
                  is_active:
                    type: boolean
                  in_projects:
                    type: array
                    items:
                      type: object
                      properties:
                        project:
                          type: string
                        permissions:
                          type: array
                          items:
                            type: string
                  has_permissions:
                    type: array
                    items:
                      type: string
        "403":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userId} not found"
    post:
      summary: "Modify a user"
      description: "Modify value(s) of a user definition."
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                givenName:
                  type: string
                familyName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                isActive:
                  type: boolean
                inProjects:
                  type: array
                  items:
                    type: object
                    properties:
                      project:
                        type: string
                      permissions:
                        oneOf:
                          - type: array
                            items:
                              type: string
                          - type: object
                            properties:
                              add:
                                type: array
                                items:
                                  type: string
                              del:
                                type: array
                                items:
                                  type: string
                hasPermissions:
                  oneOf:
                    - type: array
                      items:
                        type: string
                    - type: object
                      properties:
                        add:
                          type: array
                          items:
                            type: string
                        del:
                          type: array
                          items:
                            type: string
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userid} created, 'userIri': '{userid}'"
        400:
          description: "Several Errors that involve bad requests"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "JSON expected. Instead received {request.content_type}"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}"
        404:
          description: "Userid not found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "A user with a user ID '{userId}' already exists"
        500:
          description: "Internal Server error. Should not be reachable"

  /admin/user/search:
    get:
      summary: "Searches for given user"
      description: "Search for a given user"
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          description: "userId of user"
          required: false
        - in: query
          name: familyName
          schema:
            type: string
          description: "Family name of user"
          required: false
        - in: query
          name: givenName
          schema:
            type: string
          description: "Given name of user"
          required: false
        - in: query
          name: inProject
          schema:
            type: string
          description: "Users belonging to given project"
          required: false
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ['https://orcid.org/0000-0003-1681-4036', 'https://orcid.org/0000-0003-1485-4923', 'https://orcid.org/0000-0001-9277-3921']
        400:
          description: "Several Errors that involve bad requests"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Expected JSON, received something else//Either label or comment needs to be provided"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}"

  /admin/user/get:
    get:
      summary: "Get user by iri"
      description: "Get all user data from the user Iri"
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: iri
          schema:
            type: string
          description: Iri of user
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                required:
                  - creator
                  - created
                  - contributor
                  - modified
                  - userId
                  - userIri
                  - family_name
                  - given_name
                  - email
                properties:
                  creator:
                    type: string
                  created:
                    type: string
                    format: date-time
                  contributor:
                    type: string
                  modified:
                    type: string
                    format: date-time
                  userIri:
                    type: string
                  userId:
                    type: string
                  family_name:
                    type: string
                  given_name:
                    type: string
                  email:
                    type: string
                  is_active:
                    type: boolean
                  in_projects:
                    type: array
                    items:
                      type: object
                      properties:
                        project:
                          type: string
                        permissions:
                          type: array
                          items:
                            type: string
                  has_permissions:
                    type: array
                    items:
                      type: string
        "403":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {iri} not found"


  /admin/project/{projectId}:
    put:
      summary: Project creation
      description: Creates a new project in the database
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                projectIri:
                  type: string
                label:
                  $ref: '#/components/schemas/LangString'
                comment:
                  $ref: '#/components/schemas/LangString'
                namespaceIri:
                  type: string
                projectStart:
                  type: string
                projectEnd:
                  type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Project successfully created"
        400:
          description: "Several Errors that involve bad requests"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Invalid content type, JSON required//A meaningful label and comment need to be provided and can not be empty (...)"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "No permission to create a new project.//Connection failed: {str(error)}"
        409:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'A Project with a projectIri "http://unittest.org/project/testproject" already exists'
        500:
          description: "Internal Server error. Should not be reachable"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string

    delete:
      summary: "Delete a project"
      description: "The user that has the rights (given by his token) deletes a project"
      security:
        - AccessToken: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Project successfully deleted"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}//No permission to delete project {project}."
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project with IRI/shortname "nonexistingproject" not found.'
        500:
          description: "Internal Server error. Should not be reachable"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string

    get:
      summary: "Gets/reads Information about a project"
      description: "The user that has the rights (given by his token) gets Information about a project"
      security:
        - AccessToken: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  projectIri:
                    type: string
                    description: An Iri or a QName identifying the project
                  creator:
                    type: string
                    description: An Iri or QName describing the user
                  created:
                    type: string
                    format: date
                    description: Creation date of this project
                  contributor:
                    type: string
                    description: An Iri or QName describing the user
                  modified:
                    type: string
                    format: date
                    description: Last modification date of project
                  label:
                    $ref: '#/components/schemas/LangString'
                  comment:
                    $ref: '#/components/schemas/LangString'
                  message:
                    type: string
                  shortName:
                    type: string
                    pattern: ^[a-zA-Z_][a-zA-Z0-9._-]*$
                  namespace IRI:
                    type: string
                  project start:
                    type: string
                    format: date
                  project end:
                    type: string
                    format: date
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project with IRI/shortname "projectdoesnotexist" not found.'

    post:
      summary: "Modify/updates a project"
      description: "The user that has the rights (given by his token) modifies a project"
      security:
        - AccessToken: [ ]
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                label:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                comment:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                projectStart:
                  type: string
                projectEnd:
                  type: string
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project updated successfully'
        400:
          description: "Several Errors that involve bad requests"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "JSON expected. Instead received {request.content_type}"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'projectShortName, projectIri and namespaceIri must not be modified//Connection failed: {str(error)}//No permission to create a new project.'
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project with IRI/shortname "notexistingproject" not found.'
        500:
          description: "Internal Server error. Should not be reachable"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string

  /admin/project/search:
    get:
      summary: "Searches for given parameters"
      description: "The user that has the rights (given by his token) searches for given parameters in projects"
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: label
          schema:
            type: string
          description: Label or part of label of project
        - in: query
          name: comment
          schema:
            type: string
          description: Comment or part of comment of project
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    projectIri:
                      type: string
                    projectShortName:
                      type: string
              example:
                example1:
                  summary: Example response
                  value: [{projectIri: "http://www.gaga/hallo", projectShortName: "hallo"}, {projectIri: "mypr:project", projectShortName: "project"}]
        400:
          description: "Several Errors that involve bad requests"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Expected JSON, received something else//Either label or comment needs to be provided"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}"


  /admin/project/get:
    get:
      summary: "Get project by iri"
      description: "Get all project data from the project iri"
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: iri
          schema:
            type: string
          description: Iri of project
          required:
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  projectIri:
                    type: string
                    description: An Iri or a QName identifying the project
                  creator:
                    type: string
                    description: An Iri or QName describing the user
                  created:
                    type: string
                    format: date
                    description: Creation date of this project
                  contributor:
                    type: string
                    description: An Iri or QName describing the user
                  modified:
                    type: string
                    format: date
                    description: Last modification date of project
                  label:
                    $ref: '#/components/schemas/LangString'
                  comment:
                    $ref: '#/components/schemas/LangString'
                  message:
                    type: string
                  shortName:
                    type: string
                    pattern: ^[a-zA-Z_][a-zA-Z0-9._-]*$
                  namespace IRI:
                    type: string
                  project start:
                    type: string
                    format: date
                  project end:
                    type: string
                    format: date
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}"
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project with IRI/shortname "projectdoesnotexist" not found.'

  /admin/project/getid:
    get:
      summary: Get project shortname (project id) from Iri
      description: Get the project shortname from the project IRI
      security:
        - AccessToken: [ ]
      parameters:
        - in: query
          name: iri
          schema:
            type: string
          description: Iri of project to get the id from
          required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
                required: [ id ]
        400:
          description: Request has wrong or missing parameter
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                required: [ message ]
        404:
          description: "Project not found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                required: [ message ]
        500:
          description: "Unknown error"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                required: [ message ]

  /admin/permissionset/{definedByProject}/{permissionSetId}:
    put:
      summary: Permissionset creation
      description: Creates a new permissionset in the database
      parameters:
        - name: definedByProject
          description: The project that defines this permission set (either the IRI or the shortname)
          in: path
          required: true
          schema:
            type: string
        - name: permissionSetId
          description: A unique identifier for the permission set (unique within the project as given by :definedByProject)
          in: path
          required: true
          schema:
            type: string

      requestBody:
        content:
          application/json:
            schema:
              properties:
                label:
                  $ref: '#/components/schemas/LangString'
                comment:
                  $ref: '#/components/schemas/LangString'
                givesPermission:
                  type: string
                  enum:
                    - DATA_RESTRICTED
                    - DATA_VIEW
                    - DATA_EXTEND
                    - DATA_UPDATE
                    - DATA_DELETE
                    - DATA_PERMISSIONS
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Permissionset successfully created"
        400:
          description: "Several Errors that involve bad requests"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "JSON expected. Instead received {request.content_type}//The Field/s {unknown_json_field} is/are not used to create a permissionset. Usable are {known_json_fields}. Aborded operation// (...)"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "No permission to create a new project.//Connection failed: {str(error)}"
        409:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'A permission set "oldap:testpermissionset" already exists'
        500:
          description: "Internal Server error. Should not be reachable"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string

    delete:
      summary: "Delete a permissionset"
      description: "The user that has the rights (given by his token) deletes a permissionset"
      security:
        - AccessToken: [ ]
      parameters:
        - name: definedByProject
          description: The project that defines this permission set (either the IRI or the shortname)
          in: path
          required: true
          schema:
            type: string
        - name: permissionSetId
          description: A unique identifier for the permission set (unique within the project as given by :definedByProject)
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Permissionset successfully deleted"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}//Actor has no ADMIN_PERMISSION_SETS permission for project oldap:SystemProject"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'No permission set "oldap:nonexistingproject"'
        500:
          description: "Internal Server error. Should not be reachable"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string

    get:
      summary: "Gets/reads Information about a permissionset"
      description: "The user that has the rights (given by his token) gets Information about a permissionset"
      security:
        - AccessToken: [ ]
      parameters:
        - name: definedByProject
          description: The project that defines this permission set (either the IRI or the shortname)
          in: path
          required: true
          schema:
            type: string
        - name: permissionSetId
          description: A unique identifier for the permission set (unique within the project as given by :definedByProject)
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  permissionSetIri:
                    type: string
                  creator:
                    type: string
                  created:
                    type: string
                    format: date-time
                  contributor:
                    type: string
                  modified:
                    type: string
                    format: date-time
                  permissionSetId:
                    type: string
                  label:
                    $ref: '#/components/schemas/LangString'
                  comment:
                    $ref: '#/components/schemas/LangString'
                  givesPermission:
                    type: string
                  definedByProject:
                    type: string
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'No permission set "oldap:doesnotexist"'
    post:
      summary: "Modify/updates a permissionset"
      description: "The user that has the rights (given by his token) modifies a permissionset"
      security:
        - AccessToken: [ ]
      parameters:
        - name: definedByProject
          description: The project that defines this permission set (either the IRI or the shortname)
          in: path
          required: true
          schema:
            type: string
        - name: permissionSetId
          description: A unique identifier for the permission set (unique within the project as given by :definedByProject)
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                label:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                comment:
                  oneOf:
                    - $ref: '#/components/schemas/LangString'
                    - type: object
                      properties:
                        add:
                          $ref: '#/components/schemas/LangString'
                        del:
                          $ref: '#/components/schemas/LangString'
                givesPermission:
                  oneOf:
                    - type: array
                      items:
                        type: string
                    - type: object
                      properties:
                        add:
                          type: array
                          items:
                            type: string
                            enum:
                              - DATA_RESTRICTED
                              - DATA_VIEW
                              - DATA_EXTEND
                              - DATA_UPDATE
                              - DATA_DELETE
                              - DATA_PERMISSIONS
                        del:
                          type: array
                          items:
                            type: array
                            items:
                              type: string
                              enum:
                                - DATA_RESTRICTED
                                - DATA_VIEW
                                - DATA_EXTEND
                                - DATA_UPDATE
                                - DATA_DELETE
                                - DATA_PERMISSIONS
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Permissionset updated successfully'
        400:
          description: "Several Errors that involve bad requests"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "JSON expected. Instead received {request.content_type}//For the label either a list or a dict is expected, not a string//(...)"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Connection failed: {str(error)}//Actor has no ADMIN_PERMISSION_SETS permission for project oldap:SystemProject'
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'No permission set "oldap:notexistingproject"'
        500:
          description: "Internal Server error. Should not be reachable"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string

  /admin/permissionset/search:
    get:
      summary: "Searches for given parameters"
      description: "The user that has the rights (given by his token) searches for given parameters in permissionsets"
      security:
        - AccessToken: [ ]
      parameters:
        - name: label
          in: query
          schema:
            type: string
          description: "Filter by label"
          required: false  # ✅ Allows omitting this parameter
        - name: definedByProject
          in: query
          schema:
            type: string
          description: "Filter by project definition"
          required: false
        - name: givesPermission
          in: query
          schema:
            type: string
          description: "Filter by permission"
          required: false

      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ['https://orcid.org/0000-0003-1681-4036', 'https://orcid.org/0000-0003-1485-4923', 'https://orcid.org/0000-0001-9277-3921']
        400:
          description: "Several Errors that involve bad requests"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Expected JSON, received something else//The Field/s {unknown_json_field} is/are not used to search for a permissionset. Usable are {known_json_fields}. Aborded operation//(...)"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Connection failed: {OldapError}"

  /admin/datamodel/{project}:
    put:
      summary: Creates an empty datamodel
      description: Creates an empty datamodel to be filled later by other viewfunctions
      parameters:
        - name: project
          description: The Name of the project where the new datamodel should be located
          in: path
          required: true
          schema:
            type: string
    get:
      summary: Read a datamodel
      description:
        Viewfunction to get the information about a datamodel of a project.
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The information about the datamodel of the given project is shown
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: '#/components/schemas/Iri'
                  standaloneProperties:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'

  /admin/datamodel/{project}/property/{property}:
    put:
      summary: Adds a standalone property to an existing datamodel
      description:
        Viewfunction to add a standalone property to an existing datamodel. A JSON is expectet that has the following form. 
        Either the class or the datatype must be given but not both at the same time. If the datatype is given, then all fields are optional. 
        If the class is given, only subPropertyOf, name and desctiption are allowed.
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: property
          description: The name (Iri) of the property one wish to add
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Standalone property in datamodel {project} successfully created"
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Connection failed: {str(error)}//Actor has no ADMIN_PERMISSION_SETS permission for project oldap:SystemProject'
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project with IRI/shortname "hyha123" not found.'
        500:
          description: "Internal Server error. Should not be reachable"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string


  /admin/datamodel/{project}/{resource}:
    put:
      summary: creates a new resource in a datamodel
      description:
        Viewfunction to add a resource to an existing datamodel. A JSON is expectet that has the following form. 
        In the hasProperty, either the class or the datatype must be given but not both at the same time. If the datatype is given, then all fields are optional. 
        If the class is given, only subPropertyOf, name and desctiption are allowed.
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: resource
          description: The name (Iri) of the resource one wish to add
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Resource in datamodel {project} successfully created"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: Property IRI is missing in HasProperty//JSON expected. Instead received {request.content_type}
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Connection failed: {str(error)}//Actor has no ADMIN_PERMISSION_SETS permission for project oldap:SystemProject'
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project with IRI/shortname "hyha123" not found.'
        409:
          description: Resource already exists
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The resource class "hyha:Sheep" already exists. It cannot be replaced. Update/delete it.'
        500:
          description: "Internal Server error. Should not be reachable"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string

  /admin/datamodel/{project}/{resource}/{property}:
    put:
      summary: creates a new property inside a resource in a datamodel
      description:
        Viewfunction to add a property to an existing resource inside a datamodel. A JSON is expectet that has the following form. 
        In the hasProperty, either the class or the datatype must be given but not both at the same time. If the datatype is given, then all fields are optional. 
        If the class is given, only subPropertyOf, name and desctiption are allowed.
      parameters:
        - name: project
          description: The Name of the project where the datamodel is located
          in: path
          required: true
          schema:
            type: string
        - name: resource
          description: The name (Iri) of the resource where the property should be added
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
        - name: property
          description: The name (Iri) of the property one wish to add
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Iri'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Property'
                - type: object
                  properties:
                    maxCount:
                      description: Denotes how often (maximum) this property can be used in one resource
                      type: number
                      example: 3
                    minCount:
                      description: Denotes how often (minimal) this property must be used in one resource
                      type: number
                      example: 1
                    order:
                      description: Hint for GUI. Tells order of properties for a GUI
                      type: number
                      example: 2
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Property in resource {resource} in datamodel {project} successfully created"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: JSON expected. Instead received {request.content_type}
        403:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Connection failed: {str(error)}//Actor has no ADMIN_PERMISSION_SETS permission for project oldap:SystemProject'
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Project with IRI/shortname "hyha123" not found.'
        409:
          description: Resource already exists
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'The resource class "hyha:Sheep" already exists. It cannot be replaced. Update/delete it.'
        500:
          description: "Internal Server error. Should not be reachable"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string


components:
  schemas:
    user_get_body_200:
      type: object
      properties:
        userIri:
          type: string
        userId:
          type: string
        family_name:
          type: string
        given_name:
          type: string
        in_projects:
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
        has_permissions:
          type: array
          items:
            type: string
    user_get_body_401:
      type: object
      properties:
        message:
          type: string
          example: "Connection failed: {OldapError}"
    admin_project_body:
      type: object
      properties:
        projectIri:
          type: string
        projectShortName:
          type: string
        label:
          type: string
        comment:
          type: string
        namespaceIri:
          type: string
        projectStart:
          type: string
        projectEnd:
          type: string
    project_response_200:
      type: object
      properties:
        message:
          type: string

    admin_auth_body:
      type: object
      properties:
        password:
          type: string
      required:
        - password
    auth_response_200:
      type: object
      properties:
        token:
          type: string
    auth_response_400:
      description: if no JSON is sent
      type: object
      properties:
        message:
          type: string
          example: "Invalid content type, JSON required"
    auth_response_401:
      description: "If connection to server fails due to incorrect token"
      type: object
      properties:
        message:
          type: string
          example: "{OldapError}"
    auth_response_404:
      description: if user not found
      type: object
      properties:
        message:
          type: string
          example: "User {userId} not found"
    new_user:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        password:
          type: string
          minLength: 8
        isActive:
          type: boolean
        userIri:
          type: string
        inProjects:
          description: "The project field is the QName of the project,
          the permissions is a sets of admin permissions."
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
                  enum:
                    - ADMIN_OLDAP
                    - ADMIN_USERS
                    - ADMIN_PERMISSION_SETS
                    - ADMIN_RESOURCES
                    - ADMIN_MODEL
                    - ADMIN_CREATE

        hasPermissions:
          description: "Lust be a list of QNames of the permission sets."
          type: array
          items:
            type: string
      required:
        - givenName
        - familyName
        - password

    mod_user:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        password:
          type: string
        inProjects:
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
        hasPermissions:
          type: array
          items:
            type: string

    LangString:
      oneOf:
        - type: array
          description: List of strings, each with an optional language tag (e.g., ["Lastname@en", "Nachname@de"])
          items:
            type: string
          example: ["Eine Buchseite@de", "A page of a book@en"]
        - type: string
          description: Single string with optional language tag (e.g., "Lastname@en").
          example: "A page of a book@en"

    Iri:
      type: string
      pattern: "^[a-zA-Z0-9_-]+:[a-zA-Z0-9_-]+$"
      description: "IRI in the format 'project:object', where 'project' is the project name and 'object' is the object name."
      example: "myproj:pageOf"

    Property:
      properties:
        subPropertyOf:
          $ref: '#/components/schemas/Iri'
          description: Iri() of the the Superclass, e.g. "myproj:partOf" ; partOf would be generic case of pageOf
          example: "hyha:testProp"
        class:
          $ref: '#/components/schemas/Iri'
          description: An Iri() that describes the class of the instance on which this property must point e.g. "myproj:Book" means that the property points on book.
          example: "xml:Date"
        datatype:
          type: string
          description: xsd_datatype if the property is represented via a literal
          example: "rdf:langString"
        name:
          $ref: '#/components/schemas/LangString'
          description: Human readable Name.
        description:
          $ref: '#/components/schemas/LangString'
          description: A description of the property.
        languageIn:
          type: array
          description: The languages that are allowed in the property
          example: [ "en", "fr", "it", "de" ]
          items:
            type: string
        uniqueLand:
          type: boolean
          description: Describes if each language must be present only once. This field is only applicable if the property is of datatype langstring.
          example: True
        inSet:
          type: array
          example: [ "Renault", "Opel", "BMW", "Mercedes" ]
          items:
            type: string
        minLength:
          description: Only applicable in xsd:string and rdf:langString. Denotes the minimal length of the string.
          oneOf:
            - type: integer
              example: 1
            - type: number
              format: float
              example: 1.1
        maxLength:
          description: Only applicable in xsd:string and rdf:langString. Denotes the maximal length of the string.
          oneOf:
            - type: int
              example: 1
            - type: float
              example: 1.1
        pattern:
          description: Tells if the string must follow a certain regex pattern. Only applicable in xsd:string and rdf:langString.
          type: string
          example: r"^[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z]{2,}$"
        minExclusive:
          description: Minimal value (exclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
          oneOf:
            - type: float
              example: 5.5
            - type: int
              example: 5
        minInclusive:
          description: Minimal value (inclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
          oneOf:
            - type: float
              example: 5.5
            - type: int
              example: 5
        maxExclusive:
          description: Maximal value (exclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
          oneOf:
            - type: float
              example: 5.5
            - type: int
              example: 5
        maxInclusive:
          description: Maximal value (inclusive the value itself) for a numerical datatype of the property like xsd:date/xsd:int/xsd:float...
          oneOf:
            - type: float
              example: 5.5
            - type: int
              example: 5
        lessThan:
          description: The given numerical value must be smaller than the value of the given reverenced IRI property e.g. Iri("myproj:deathDate")
          $ref: '#/components/schemas/Iri'
        lessThanOrEquals:
          description: The given numerical value must be smaller or equal compared to the value of the given reverenced IRI property e.g. Iri("myproj:deathDate")
          $ref: '#/components/schemas/Iri'

    Resource:
      type: object
      properties:
        label:
          $ref: '#/components/schemas/LangString'
          description: A label for the resource.
        comment:
          $ref: '#/components/schemas/LangString'
          description: A comment for the resource.
        closed:
          description: The standard closed constraint of RDF. See https://www.w3.org/TR/shacl/#ClosedConstraintComponent
          type: boolean
          example: True
        hasProperty:
          type: array
          items:
            type: object
            properties:
              property:
                oneOf:
                  - allOf:
                      - type: object
                        properties:
                          iri:
                            $ref: '#/components/schemas/Iri'
                            description: The Iri of the property inside the resource.
                            example: "hyha:testProp"
                      - $ref: '#/components/schemas/Property'
                  - $ref: '#/components/schemas/Iri'
                    description: The Iri that references an already existing standalone property
              maxCount:
                description: Denotes how often (maximum) this property can be used in one resource
                type: number
                example: 3
              minCount:
                description: Denotes how often (minimal) this property must be used in one resource
                type: number
                example: 1
              order:
                description: Hint for GUI. Tells order of properties for a GUI
                type: number
                example: 2

  securitySchemes:
    AccessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

