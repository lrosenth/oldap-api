---
openapi: 3.0.0
info:
  title: OLDAP-API
  description: RESTful API for oldap
  version: 0.1.0
servers:
- url: http://127.0.0.1:5000
  description: local server...
paths:
  /admin/auth/{userId}:
    post:
      summary: Authentification/login
      description: Perform login/logout with userid/password. Returns a JWT token.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin_auth_body'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth_response_200'
        400:
          description: "Invalid content type"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth_response_400'
        "401":
          description: "Unauthorized"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth_response_404'
        500:
          description: "Internal Server error"
    delete:
      summary: "Logout"
      description: "Logout from system"
      security:
        - AccessToken: []
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
        500:
          description: "Internal Server error"
  /admin/user/{userId}:
    get:
      summary: "Get user info"
      description: "Get all information about a user"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_get_body_200'
        "401":
          description: "Unauthorized"
        "404":
          description: "Not Found"
        500:
          description: "Internal Server error"
    delete:
      summary: "Delete a user"
      description: "The user that has the rights (given by his token) deletes another user"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "404":
          description: "Not Found"
        500:
          description: "Internal Server error"
    put:
      summary: "Create a new user"
      description: "Create a new user with the given data"
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            maxLength: 32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new_user'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "User {userid} created"
                  userIri:
                    type: string
                    example: "{userIri}"
        400:
          description: "Feldrequirement fehlt"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Missing field {field_name}//JSON expected. Instead received {request.content_type}"
        409:
          description: "Userid or useriri already exists"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "A user with a user ID {userId} already exists"
        422:
          description: "Passwort zu insicher - wird daher nicht bearbeitet"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
        500:
          description: "Internal Server error"
    post:
      summary: "Modify a user"
      description: "Modify value(s) of a user definition."
      security:
        - AccessToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mod_user'
        required: true
      responses:
        "200":
          description: "OK"
        400:
          description: "Form/Inhalt der Ã¼bermittelten Daten stimmt nicht"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
        404:
          description: "Userid not found"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
        500:
          description: "Internal Server error"

components:
  schemas:
    user_get_body_200:
      type: object
      properties:
        userIri:
          type: string
        userId:
          type: string
        family_name:
          type: string
        given_name:
          type: string
        in_projects:
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
        has_permissions:
          type: array
          items:
            type: string
    admin_auth_body:
      type: object
      properties:
        password:
          type: string
      required:
        - password
    auth_response_200:
      type: object
      properties:
        token:
          type: string
    auth_response_400:
      description: if no JSON is sent
      type: object
      properties:
        message:
          type: string
    auth_response_404:
      description: if user not found
      type: object
      properties:
        message:
          type: string
    new_user:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        password:
          type: string
          minLength: 8
        userIri:
          type: string
        inProjects:
          description: "The project field is the QName of the project,
          the permissions is a sets of admin permissions."
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
                  enum:
                    - ADMIN_OLDAP
                    - ADMIN_USERS
                    - ADMIN_PERMISSION_SETS
                    - ADMIN_RESOURCES
                    - ADMIN_MODEL
                    - ADMIN_CREATE

        hasPermissions:
          description: "Lust be a list of QNames of the permission sets."
          type: array
          items:
            type: string
      required:
        - givenName
        - familyName
        - password

    mod_user:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        password:
          type: string
        inProjects:
          type: array
          items:
            type: object
            properties:
              project:
                type: string
              permissions:
                type: array
                items:
                  type: string
        hasPermissions:
          type: array
          items:
            type: string
  securitySchemes:
    AccessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT


